{
  "Uuid": "aa1b6df0-bf49-4839-8530-a24f651078c0",
  "IsCustomNode": true,
  "Category": "Shapely.Geometry.Conversion",
  "Description": "",
  "Name": "ShapelytoDynamo",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "0d9526c00dca465c8103d1b64f09599e",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "7ced9fce28c448cfae1fb430e2723157",
          "Name": "lists",
          "Description": "List of lists to be transposed\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2873c93d13dd417e955ae91880f35d45",
          "Name": "lists",
          "Description": "List of transposed lists",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "DSCore.List.Transpose@var[]..[]",
      "Replication": "Auto",
      "Description": "Swaps rows and columns in a list of lists. If there are some rows that are shorter than others, null values are inserted as place holders in the resultant array such that it is always rectangular.\n\nList.Transpose (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "Code": "import clr\r\nclr.AddReference('RevitAPI')\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.UI import *\r\n\r\nclr.AddReference('DSCoreNodes')\r\nimport DSCore\r\nfrom DSCore import *\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\n\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI.Selection import ObjectType\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nimport Autodesk.DesignScript.Geometry as adg\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\napp = DocumentManager.Instance.CurrentUIApplication.Application\r\n\r\ndynamo_geometry1 = IN[0]\r\ngeo = []\r\ny = []\r\nif isinstance(dynamo_geometry1, adg.Point):\r\n    shapely_geometry1 = dynamo_geometry1\r\n    geo.append(shapely_geometry1)\r\n    \r\nelif isinstance(dynamo_geometry1, adg.Line):\r\n    shapely_geometry1 = dynamo_geometry1.StartPoint,dynamo_geometry1.EndPoint\r\n    geo.append(shapely_geometry1)\r\n    \r\nelif isinstance(dynamo_geometry1, adg.Polygon):\r\n    points = adg.Polygon.Corners(dynamo_geometry1)\r\n    shapely_geometry1 = points\r\n    geo.append(shapely_geometry1)\r\n\r\nelif isinstance(dynamo_geometry1, adg.PolyCurve):\r\n    points = []\r\n    b = PolyCurve.Curves(dynamo_geometry1)\r\n    \r\n    c = [r.StartPoint for r in b ]+[r.EndPoint for r in b ]\r\n    geo.append(c)\r\n    \r\nif isinstance(dynamo_geometry1, adg.Point):\r\n\r\n    t = [p.X for p in geo], [p.Y for p in geo], [p.Z for p in geo]\r\n    a = zip(t[0],t[1],t[2])\r\n\r\nelse :\r\n\r\n    po = [adg.Point.PruneDuplicates(geo[0], 0.001)]\r\n    \r\n    unique_points = []\r\n    for p in po[0]:\r\n        if p not in unique_points:\r\n            unique_points.append(p)\r\n    \r\n    a = [p.X for p in unique_points], [p.Y for p in unique_points],[p.Z for p in unique_points]\r\n\r\nOUT = a",
      "Engine": "IronPython2",
      "EngineName": "IronPython2",
      "VariableInputPorts": true,
      "Id": "ccd722e5dafa483da02cbd1e6a04a124",
      "NodeType": "PythonScriptNode",
      "Inputs": [
        {
          "Id": "cebfacf2cd444ef3883323f2595aca75",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "042088beb07f4a24bb4d2467c0be5951",
          "Name": "OUT",
          "Description": "Résultat du script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "cb265e1040594e16ba55f80c20871802",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "6a046b7869c343f0a979ed101772eaca",
          "Name": "list",
          "Description": "List to chop into sublists\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a526201a9938433eab8311575aced637",
          "Name": "lengths",
          "Description": "Lengths of consecutive sublists to be created from the input list\n\nint[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c2fdf32fb6954e1589e1b6f7208f67d2",
          "Name": "lists",
          "Description": "Sublists created from the list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "DSCore.List.Chop@var[]..[],int[]",
      "Replication": "Auto",
      "Description": "Chop a list into a set of consecutive sublists with the specified lengths. List division begins at the top of the list.\n\nList.Chop (list: var[]..[], lengths: int[]): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "Code": "#Copyright(c) 2023, Durmus Bayryam\r\n# Gıthub : https://github.com/DurmusCesur/Shapely.git\r\nimport clr\r\nimport sys\r\nimport re\r\nimport System\r\n\r\nclr.AddReference('Python.Included')\r\nimport Python.Included as pyInc\r\npath_py3_lib = pyInc.Installer.EmbeddedPythonHome\r\nsys.path.append(path_py3_lib + r'\\Lib\\site-packages')\r\n\r\nimport shapely.geometry as sg\r\nimport Autodesk.DesignScript.Geometry as adg\r\nfrom shapely import normalize, Polygon , BufferJoinStyle\r\nfrom shapely.geometry import Polygon, MultiPolygon ,MultiLineString\r\n\r\n\r\ndynamo_point = IN[0]\r\ntype = IN[1]\r\n\r\nshapely_poly = []\r\nshapely_polygons = []\r\ndef spolygon (dynamo_polygons ):\r\n    \r\n    \r\n        \r\n    if isinstance(type, adg.Line):\r\n       shapely_poly = sg.LineString([coord for coord in dynamo_polygons])\r\n       \r\n    elif isinstance(type, adg.Point):\r\n       shapely_poly = sg.Point([coord for coord in dynamo_polygons])\r\n\r\n    elif isinstance(type, adg.Polygon):\r\n        exterior_points = [coord for coord in dynamo_polygons]\r\n        shapely_poly = Polygon(exterior_points)\r\n        \r\n    elif isinstance(type, adg.PolyCurve):\r\n       shapely_poly = sg.LineString([coord for coord in dynamo_polygons])\r\n       \r\n    return shapely_poly\r\n\r\nif isinstance(IN[0], list):\r\n    dynamo_point = IN[0]\r\nelse:\r\n    dynamo_point = [IN[0]]\r\n\r\ndynamo_geometries = [spolygon(geometry) for geometry in dynamo_point]\r\n\r\nOUT = dynamo_geometries",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "8e57ddcf4f7d422cabeab9ece8df239f",
      "NodeType": "PythonScriptNode",
      "Inputs": [
        {
          "Id": "46191eca19fb4fd0abdb8f4f8c272ac9",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9b8b13dce3ba4d65ab5f265e89394017",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e1e6a32505f24edc9b429f3992d0138a",
          "Name": "OUT",
          "Description": "Résultat du script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "Id": "06bc25a8a14a48f6b1582cd199d96e13",
      "NodeType": "FunctionNode",
      "Inputs": [
        {
          "Id": "46649a5175ec4641a800d1d7a90c5fbf",
          "Name": "list",
          "Description": "List to get the item count of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d25adcf0302940fe8410420eaf6aaf28",
          "Name": "int",
          "Description": "List length.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "FunctionSignature": "DSCore.List.Count@var[]..[]",
      "Replication": "Auto",
      "Description": "Returns the number of items stored in the given list.\n\nList.Count (list: var[]..[]): int"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "Parameter": {
        "Name": "_dyngeometry",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "033fa0a374024da1b82c85eb732bab47",
      "NodeType": "InputNode",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e381beaafe73455497a07c0d1477d1d6",
          "Name": "",
          "Description": "Données d'entrée",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "ElementResolver": null,
      "Symbol": "_shgeometry;",
      "Id": "46678884eb69406aba53d9dec3f2fa00",
      "NodeType": "OutputNode",
      "Inputs": [
        {
          "Id": "f0d859cf357847e79ca53c8397d01572",
          "Name": "",
          "Description": "Données de sortie",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    }
  ],
  "Connectors": [
    {
      "Start": "2873c93d13dd417e955ae91880f35d45",
      "End": "6a046b7869c343f0a979ed101772eaca",
      "Id": "c6267a7058e04213a6bc7d58c78a7cef",
      "IsHidden": "False"
    },
    {
      "Start": "042088beb07f4a24bb4d2467c0be5951",
      "End": "7ced9fce28c448cfae1fb430e2723157",
      "Id": "13042e6989ef442582b1f1ff29a71df1",
      "IsHidden": "False"
    },
    {
      "Start": "042088beb07f4a24bb4d2467c0be5951",
      "End": "46649a5175ec4641a800d1d7a90c5fbf",
      "Id": "b1f8c00f5b7c4590afada89189d7d5db",
      "IsHidden": "False"
    },
    {
      "Start": "c2fdf32fb6954e1589e1b6f7208f67d2",
      "End": "46191eca19fb4fd0abdb8f4f8c272ac9",
      "Id": "45c20a68abf14c21abd0c8983c3e6bc4",
      "IsHidden": "False"
    },
    {
      "Start": "e1e6a32505f24edc9b429f3992d0138a",
      "End": "f0d859cf357847e79ca53c8397d01572",
      "Id": "48313e52c63943c7b125df60babf3154",
      "IsHidden": "False"
    },
    {
      "Start": "d25adcf0302940fe8410420eaf6aaf28",
      "End": "a526201a9938433eab8311575aced637",
      "Id": "6b5be3720adb4c07a3e22ead64cd751e",
      "IsHidden": "False"
    },
    {
      "Start": "e381beaafe73455497a07c0d1477d1d6",
      "End": "9b8b13dce3ba4d65ab5f265e89394017",
      "Id": "9bca95c6f59f40ac84fa5054fde13e0c",
      "IsHidden": "False"
    },
    {
      "Start": "e381beaafe73455497a07c0d1477d1d6",
      "End": "cebfacf2cd444ef3883323f2595aca75",
      "Id": "6fd2dbd66dda4358b7d0d9c4f72dafff",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Author": "None provided",
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.18.1.5096",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "_Background Preview",
      "EyeX": -15.935773849487305,
      "EyeY": 21.396383285522461,
      "EyeZ": 50.803676605224609,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Id": "0d9526c00dca465c8103d1b64f09599e",
        "Name": "List.Transpose",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": -24.0,
        "Y": -65.333333333333258
      },
      {
        "Id": "ccd722e5dafa483da02cbd1e6a04a124",
        "Name": "Python Script",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": -262.66666666666663,
        "Y": 12.0
      },
      {
        "Id": "cb265e1040594e16ba55f80c20871802",
        "Name": "List.Chop",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 178.66666666666697,
        "Y": 29.333333333333371
      },
      {
        "Id": "8e57ddcf4f7d422cabeab9ece8df239f",
        "Name": "Python Script",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 410.0,
        "Y": 26.0
      },
      {
        "Id": "06bc25a8a14a48f6b1582cd199d96e13",
        "Name": "List.Count",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": -19.999999999999773,
        "Y": 82.000000000000057
      },
      {
        "Id": "033fa0a374024da1b82c85eb732bab47",
        "Name": "Input",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": -611.33333333333337,
        "Y": 38.0
      },
      {
        "Id": "46678884eb69406aba53d9dec3f2fa00",
        "Name": "Output",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 626.66666666666652,
        "Y": 26.666666666666629
      }
    ],
    "Annotations": [],
    "X": 1049.9999999999998,
    "Y": 306.66666666666663,
    "Zoom": 1.0
  }
}